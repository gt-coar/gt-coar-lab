# Copyright (c) 2021 University System of Georgia and GTCOARLab Contributors
# Distributed under the terms of the BSD-3-Clause License

# yamllint disable rule:truthy rule:line-length rule:comments-indentation

name: CI

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  MAMBA_NO_BANNER: 1
  # our stuff
  ATEST_RETRIES: 1
  CACHE_EPOCH: 3

defaults:
  run:
    shell: bash -l {0}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    env:
      CI_LINTING: 1
    steps:
      - uses: actions/checkout@v2

      - name: cache (conda)
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-ubuntu-20.04-conda-lint-${{ hashFiles('locks/ci-linux-64.conda.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-ubuntu-20.04-conda-lint-
            ${{ env.CACHE_EPOCH }}-ubuntu-20.04-conda-

      - name: setup conda (mambaforge)
        uses: conda-incubator/setup-miniconda@master
        with:
          condarc-file: .github/.condarc
          environment-file: locks/ci-linux-64.conda.lock
          miniforge-variant: Mambaforge
          miniforge-version: latest

      - name: cache (yarn)
        uses: actions/cache@v1
        with:
          path: _scripts/.yarn-packages
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('_scripts/yarn.lock', '_scripts/.yarnrc') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: preflight (doit)
        run: doit list --all --status

      - name: lint
        run: doit lint || doit lint || doit lint

      - name: postmortem (doit)
        if: always()
        run: doit list --all --status

  build-cpu-linux-64:
    name: build cpu-linux-64
    needs: [lint]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: apt clean (ubuntu)
        run: |
          set -eux
          df -h
          sudo apt-get -y remove \
            chromium-browser \
            lxd
          bash .github/scripts/clean_snaps.sh
          sudo apt-get -y autoremove
          sudo apt-get -y clean
          sudo rm -rf \
            "/usr/local/share/boost" \
            "$AGENT_TOOLSDIRECTORY" \
            /var/lib/apt/lists/*
          apt list --installed
          df -h

      - name: cache (conda)
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-ubuntu-20.04-conda-build-cpu-linux-64-${{ hashFiles('locks/ci-linux-64.conda.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-ubuntu-20.04-conda-build-cpu-linux-64-
            ${{ env.CACHE_EPOCH }}-ubuntu-20.04-conda-

      - name: setup conda (mambaforge)
        uses: conda-incubator/setup-miniconda@master
        with:
          condarc-file: .github/.condarc
          environment-file: locks/ci-linux-64.conda.lock
          miniforge-variant: Mambaforge
          miniforge-version: latest

      - name: preflight (doit)
        run: doit list --all --status

      - name: build (constructor)
        run: |
          set -eux
          doit build:cpu:linux-64:sha256 || doit build:cpu:linux-64:sha256

      - name: postmortem (doit)
        if: always()
        run: doit list --all --status

      - name: publish dists
        uses: actions/upload-artifact@v2
        with:
          name: cpu-linux-64 ${{ github.run_number }}
          path: ./dist

  test-cpu-linux-64:
    name: test cpu-linux-64
    needs: [build-cpu-linux-64]
    runs-on: ubuntu-20.04
    steps:
      - name: apt clean (ubuntu)
        run: |
          set -eux
          df -h
          sudo apt-get -y remove \
            chromium-browser \
            lxd
          bash .github/scripts/clean_snaps.sh
          sudo apt-get -y autoremove
          sudo apt-get -y clean
          sudo rm -rf \
            "/usr/local/share/boost" \
            "$AGENT_TOOLSDIRECTORY" \
            /var/lib/apt/lists/*
          apt list --installed
          df -h

      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: cpu-linux-64 ${{ github.run_number }}
          path: ./dist

  build-cpu-osx-64:
    name: build cpu-osx-64
    needs: [lint]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: cache (conda)
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-macos-latest-conda-build-cpu-osx-64-${{ hashFiles('locks/ci-osx-64.conda.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-macos-latest-conda-build-cpu-osx-64-
            ${{ env.CACHE_EPOCH }}-macos-latest-conda-

      - name: setup conda (mambaforge)
        uses: conda-incubator/setup-miniconda@master
        with:
          condarc-file: .github/.condarc
          environment-file: locks/ci-osx-64.conda.lock
          miniforge-variant: Mambaforge
          miniforge-version: latest

      - name: preflight (doit)
        run: doit list --all --status

      - name: build (constructor)
        run: |
          set -eux
          doit build:cpu:osx-64:sha256 || doit build:cpu:osx-64:sha256

      - name: postmortem (doit)
        if: always()
        run: doit list --all --status

      - name: publish dists
        uses: actions/upload-artifact@v2
        with:
          name: cpu-osx-64 ${{ github.run_number }}
          path: ./dist

  test-cpu-osx-64:
    name: test cpu-osx-64
    needs: [build-cpu-osx-64]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: cpu-osx-64 ${{ github.run_number }}
          path: ./dist

  build-cpu-win-64:
    name: build cpu-win-64
    needs: [lint]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: enable long paths (windows)
        run: |
          Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem -Name LongPathsEnabled -Value 1
        shell: pwsh

      - name: cache (conda)
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-windows-latest-conda-build-cpu-win-64-${{ hashFiles('locks/ci-win-64.conda.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-windows-latest-conda-build-cpu-win-64-
            ${{ env.CACHE_EPOCH }}-windows-latest-conda-

      - name: setup conda (mambaforge)
        uses: conda-incubator/setup-miniconda@master
        with:
          condarc-file: .github/.condarc
          environment-file: locks/ci-win-64.conda.lock
          miniforge-variant: Mambaforge
          miniforge-version: latest

      - name: preflight (doit)
        run: doit list --all --status

      - name: build (constructor)
        run: |
          set -eux
          doit build:cpu:win-64:sha256 || doit build:cpu:win-64:sha256

      - name: postmortem (doit)
        if: always()
        run: doit list --all --status

      - name: publish dists
        uses: actions/upload-artifact@v2
        with:
          name: cpu-win-64 ${{ github.run_number }}
          path: ./dist

  test-cpu-win-64:
    name: test cpu-win-64
    needs: [build-cpu-win-64]
    runs-on: windows-latest
    steps:
      - name: enable long paths (windows)
        run: |
          Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem -Name LongPathsEnabled -Value 1
        shell: pwsh

      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: cpu-win-64 ${{ github.run_number }}
          path: ./dist

  build-gpu-linux-64:
    name: build gpu-linux-64
    needs: [lint]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: apt clean (ubuntu)
        run: |
          set -eux
          df -h
          sudo apt-get -y remove \
            chromium-browser \
            lxd
          bash .github/scripts/clean_snaps.sh
          sudo apt-get -y autoremove
          sudo apt-get -y clean
          sudo rm -rf \
            "/usr/local/share/boost" \
            "$AGENT_TOOLSDIRECTORY" \
            /var/lib/apt/lists/*
          apt list --installed
          df -h

      - name: cache (conda)
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-ubuntu-20.04-conda-build-gpu-linux-64-${{ hashFiles('locks/ci-linux-64.conda.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-ubuntu-20.04-conda-build-gpu-linux-64-
            ${{ env.CACHE_EPOCH }}-ubuntu-20.04-conda-

      - name: setup conda (mambaforge)
        uses: conda-incubator/setup-miniconda@master
        with:
          condarc-file: .github/.condarc
          environment-file: locks/ci-linux-64.conda.lock
          miniforge-variant: Mambaforge
          miniforge-version: latest

      - name: preflight (doit)
        run: doit list --all --status

      - name: build (constructor)
        run: |
          set -eux
          doit build:gpu:linux-64:sha256 || doit build:gpu:linux-64:sha256

      - name: postmortem (doit)
        if: always()
        run: doit list --all --status

      - name: publish dists
        uses: actions/upload-artifact@v2
        with:
          name: gpu-linux-64 ${{ github.run_number }}
          path: ./dist

  test-gpu-linux-64:
    name: test gpu-linux-64
    needs: [build-gpu-linux-64]
    runs-on: ubuntu-20.04
    steps:
      - name: apt clean (ubuntu)
        run: |
          set -eux
          df -h
          sudo apt-get -y remove \
            chromium-browser \
            lxd
          bash .github/scripts/clean_snaps.sh
          sudo apt-get -y autoremove
          sudo apt-get -y clean
          sudo rm -rf \
            "/usr/local/share/boost" \
            "$AGENT_TOOLSDIRECTORY" \
            /var/lib/apt/lists/*
          apt list --installed
          df -h

      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: gpu-linux-64 ${{ github.run_number }}
          path: ./dist
