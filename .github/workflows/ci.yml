# Copyright (c) 2020 University System of Georgia and GTCOARLab Contributors
# Distributed under the terms of the BSD-3-Clause License

# yamllint disable rule:truthy

name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CONSTRUCTOR_CACHE: ~/.constructor
  ATEST_RETRIES: 1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        locks: ['_base,qa']
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@master
        with:
          activate-environment: gt-coar-lab-base
          condarc-file: .github/.condarc
          environment-file: .github/environment.yml
      - shell: bash -l {0}
        run: doit -n4 lint integrity | doit lint integrity

  build:
    name: Build ${{ matrix.os }}
    needs: [lint]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu', 'macos', 'windows']
        include:
          - os: ubuntu
            locks: '_base,core,unix,linux-64'
          - os: macos
            locks: '_base,core,unix,osx-64'
          - os: windows
            locks: '_base,core,win-64'
    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@master
        with:
          activate-environment: gt-coar-lab-base
          auto-activate-base: false
          condarc-file: .ci_support/.condarc
          environment-file: .ci_support/environment.yml

      # prepare
      - if: ${{ !contains(matrix.os, 'windows') }}
        shell: bash -l {0}
        run: anaconda-project prepare --env-spec build
      - if: ${{ contains(matrix.os, 'windows') }}
        shell: cmd /C CALL {0}
        run: anaconda-project prepare --env-spec build

      # template
      - if: ${{ !contains(matrix.os, 'windows') }}
        shell: bash -l {0}
        run: anaconda-project run build template
      - if: ${{ contains(matrix.os, 'windows') }}
        shell: cmd /C CALL {0}
        run: anaconda-project run build template

      # cache downloaded constructor packages
      - uses: actions/cache@v1
        with:
          path: ~/.constructor
          key: ${{ runner.os }}-constructor-${{ hashFiles('installer/construct.yaml') }}
          restore-keys: |
            ${{ runner.os }}-constructor-

      # build
      - if: ${{ !contains(matrix.os, 'windows') }}
        shell: bash -l {0}
        run: anaconda-project run build installer
      - if: ${{ contains(matrix.os, 'windows') }}
        shell: cmd /C CALL {0}
        run: anaconda-project run build installer

      # upload
      - name: upload installer
        uses: actions/upload-artifact@v2
        with:
          name: installer-${{ matrix.os }}-${{ github.run_number }}
          path: dist/installers

  test:
    name: Test ${{ matrix.os }}
    needs:
      - construct
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: download installer
        uses: actions/download-artifact@v2
        with:
          name: installer-${{ matrix.os }}-${{ github.run_number }}
          path: dist/installers

      # conda
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: gt-coar-lab-base
          auto-activate-base: false
          condarc-file: .ci_support/.condarc
          environment-file: .ci_support/environment-base.yml
          show-channel-urls: true
          use-only-tar-bz2: true

      # prepare
      - if: ${{ !contains(matrix.os, 'windows') }}
        shell: bash -l {0}
        run: anaconda-project prepare --env-spec qa
      - if: ${{ contains(matrix.os, 'windows') }}
        shell: cmd /C CALL {0}
        run: anaconda-project prepare --env-spec qa

      # test
      - if: ${{ !contains(matrix.os, 'windows') }}
        shell: bash -l {0}
        run: anaconda-project run atest
      - if: ${{ contains(matrix.os, 'windows') }}
        shell: cmd /C CALL {0}
        run: anaconda-project run atest

      # report
      - if: ${{ always() }}
        name: upload robot logs
        uses: actions/upload-artifact@v2
        with:
          name: atest-${{ matrix.os }}-${{ github.run_number }}
          path: atest/output

  audit:
    name: Audit
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v2

      - name: download linux reports
        uses: actions/download-artifact@v2
        with:
          name: atest-ubuntu-latest-${{ github.run_number }}
          path: atest/output

      - name: download macos reports
        uses: actions/download-artifact@v2
        with:
          name: atest-macos-latest-${{ github.run_number }}
          path: atest/output

      - name: download windows reports
        uses: actions/download-artifact@v2
        with:
          name: atest-windows-latest-${{ github.run_number }}
          path: atest/output

      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: gt-coar-lab-base
          auto-activate-base: false
          condarc-file: .ci_support/.condarc
          environment-file: .ci_support/environment-base.yml
          show-channel-urls: true
          use-only-tar-bz2: true

      - shell: bash -l {0}
        run: anaconda-project prepare --env-spec audit

      - shell: bash -l {0}
        run: anaconda-project run audit
