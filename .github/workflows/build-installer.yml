# Copyright (c) 2020 University System of Georgia and GTCOARLab Contributors
# Distributed under the terms of the BSD-3-Clause License

# yamllint disable rule:truthy

name: Build Installer

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: gt-coar-lab-base
          auto-activate-base: false
          auto-update-conda: true
          condarc-file: .ci_support/.condarc
          environment-file: .ci_support/environment-base.yml
          show-channel-urls: true
          use-only-tar-bz2: true
      - shell: bash -l {0}
        run: anaconda-project prepare --env-spec qa
      - shell: bash -l {0}
        run: anaconda-project run integrity
      - shell: bash -l {0}
        run: anaconda-project run lint
      - shell: bash -l {0}
        run: git diff -u || echo "no changes made"

  conda_lab:
    name: Build conda lab
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # cache
      - id: cache-conda-lab
        uses: actions/cache@v2
        with:
          path: dist/conda-bld/noarch/gt-coar-lab-*.tar.bz2
          key:
            lab-${{ hashFiles('binder/*', 'recipes/gt-coar-lab/**/*',
            'packages/gt-coar-lab/**.*') }}

      - if: ${{ steps.cache-conda-lab.outputs.cache-hit != 'true' }}
        uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: gt-coar-lab-base
          auto-activate-base: false
          auto-update-conda: true
          condarc-file: .ci_support/.condarc
          environment-file: .ci_support/environment-base.yml
          show-channel-urls: true
          use-only-tar-bz2: true

      # build
      - if: ${{ steps.cache-conda-lab.outputs.cache-hit != 'true' }}
        shell: bash -l {0}
        run: anaconda-project prepare --env-spec build
      - if: ${{ steps.cache-conda-lab.outputs.cache-hit != 'true' }}
        shell: bash -l {0}
        run: anaconda-project run build conda_lab

      # upload
      - name: upload gt-coar-lab conda package
        uses: actions/upload-artifact@v2
        with:
          name: conda-noarch-${{ github.run_number }}
          path: dist/conda-bld

  construct:
    name: Build ${{ matrix.os }}
    needs:
      - lint
      - conda_lab
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v2

      # restore
      - name: download gt-coar-lab conda package
        uses: actions/download-artifact@v2
        with:
          name: conda-noarch-${{ github.run_number }}
          path: dist/conda-bld

      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: gt-coar-lab-base
          auto-activate-base: false
          auto-update-conda: true
          condarc-file: .ci_support/.condarc
          environment-file: .ci_support/environment-base.yml
          show-channel-urls: true
          use-only-tar-bz2: true

      # prepare
      - if: ${{ !contains(matrix.os, 'windows') }}
        shell: bash -l {0}
        run: anaconda-project prepare --env-spec build
      - if: ${{ contains(matrix.os, 'windows') }}
        shell: cmd /C CALL {0}
        run: anaconda-project prepare --env-spec build

      # template
      - if: ${{ !contains(matrix.os, 'windows') }}
        shell: bash -l {0}
        run: anaconda-project run build template
      - if: ${{ contains(matrix.os, 'windows') }}
        shell: cmd /C CALL {0}
        run: anaconda-project run build template

      # cache
      - uses: actions/cache@v1
        with:
          path: ~/.constructor
          key: ${{ runner.os }}-constructor-${{ hashFiles('installer/construct.yaml') }}

      # build
      - if: ${{ !contains(matrix.os, 'windows') }}
        env:
          CONSTRUCTOR_CACHE: ~/.constructor
          PYTHONUNBUFFERED: 1
        shell: bash -l {0}
        run: anaconda-project run build installer
      - if: ${{ contains(matrix.os, 'windows') }}
        env:
          CONSTRUCTOR_CACHE: ~/.constructor
          PYTHONUNBUFFERED: 1
        shell: cmd /C CALL {0}
        run: anaconda-project run build installer

      # upload
      - name: upload installer
        uses: actions/upload-artifact@v2
        with:
          name: installer-${{ matrix.os }}-${{ github.run_number }}
          path: dist/installers

  test:
    name: Test ${{ matrix.os }}
    needs:
      - construct
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: download installer
        uses: actions/download-artifact@v2
        with:
          name: installer-${{ matrix.os }}-${{ github.run_number }}
          path: dist/installers

      # conda
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: gt-coar-lab-base
          auto-activate-base: false
          auto-update-conda: true
          condarc-file: .ci_support/.condarc
          environment-file: .ci_support/environment-base.yml
          show-channel-urls: true
          use-only-tar-bz2: true

      # prepare
      - if: ${{ !contains(matrix.os, 'windows') }}
        shell: bash -l {0}
        run: anaconda-project prepare --env-spec qa
      - if: ${{ contains(matrix.os, 'windows') }}
        shell: cmd /C CALL {0}
        run: anaconda-project prepare --env-spec qa

      # test
      - if: ${{ !contains(matrix.os, 'windows') }}
        env:
          PYTHONUNBUFFERED: 1
          ATEST_RETRIES: 1
        shell: bash -l {0}
        run: anaconda-project run atest
      - if: ${{ contains(matrix.os, 'windows') }}
        env:
          PYTHONUNBUFFERED: 1
          ATEST_RETRIES: 1
        shell: cmd /C CALL {0}
        run: anaconda-project run atest

      # report
      - if: ${{ always() }}
        name: upload robot logs
        uses: actions/upload-artifact@v2
        with:
          name: atest-${{ matrix.os }}-${{ github.run_number }}
          path: atest/output
