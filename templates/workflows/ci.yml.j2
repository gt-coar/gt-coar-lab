{% macro cache_conda(vm, job, locksfile) %}
      - name: cache (conda)
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{'{{'}} env.CACHE_EPOCH {{'}}'}}-{{ vm }}-conda-{{ job }}-${{'{{'}} hashFiles('{{ "', '".join(locksfile) }}') {{'}}'}}
          restore-keys: |
            ${{'{{'}} env.CACHE_EPOCH {{'}}'}}-{{ vm }}-conda-{{ job }}-
            ${{'{{'}} env.CACHE_EPOCH {{'}}'}}-{{ vm }}-conda-
{% endmacro %}

{% macro setup_miniconda(lockfile) %}
      - uses: conda-incubator/setup-miniconda@master
        with:
          condarc-file: .github/.condarc
          environment-file: {{ lockfile }}
          miniforge-variant: Mambaforge
          miniforge-version: latest
{% endmacro %}

{% raw %}
# Copyright (c) 2021 University System of Georgia and GTCOARLab Contributors
# Distributed under the terms of the BSD-3-Clause License

# yamllint disable rule:truthy rule:line-length rule:comments-indentation

name: CI

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  MAMBA_NO_BANNER: 1
  # our stuff
  ATEST_RETRIES: 1
  CACHE_EPOCH: 0

defaults:
  run:
    shell: bash -l {0}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      {% endraw %}
      {{ cache_conda('ubuntu-20.04', 'lint', ['locks/ci-linux-64.conda.lock']) }}
      {{ setup_miniconda('locks/ci-linux-64.conda.lock') }}
      {% raw %}

      - name: cache (yarn)
        uses: actions/cache@v1
        with:
          path: _scripts/.yarn-packages
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('_scripts/yarn.lock', '_scripts/.yarnrc') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - run: doit list --all --status

      - run: doit lint || doit lint || doit lint

      - if: always()
        run: doit list --all --status
{% endraw %}

{% for job in build %}
  build-{{ job.name }}:
    name: build {{ job.name }}
    runs-on: {{ job.vm }}
    needs: [lint]
    steps:
      - uses: actions/checkout@v2
      {{ cache_conda(job.vm, 'build-' ~ job.name, [job.ci_lockfile, job.lockfile]) }}
      {{ setup_miniconda(job.ci_lockfile) }}

      - run: doit list --all --status

      - run: doit -s build:{{ job.variant }}:{{ job.subdir }}

      {% raw %}
      - if: always()
        run: doit list --all --status
      {% endraw %}

      - name: publish dists
        uses: actions/upload-artifact@v2
        with:
          name: {{ job.name }} {{ "${{ github.run_number }}" }}
          path: ./dist

{% endfor %}
