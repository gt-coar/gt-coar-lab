# {{ copyright }}
# {{ license }}

# yamllint disable rule:truthy rule:line-length rule:comments-indentation
{% set if_dist_skip = "if: steps.cache-dist.outputs.cache-hit != 'true'" %}

{% macro cache_conda(vm, lockfile, if_expr="") %}
      - name: cache (conda)
        {{ if_expr }}
        uses: actions/cache@v2
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{'{{'}} env.CACHE_EPOCH {{'}}'}}-{{ vm }}-conda-${{'{{'}} hashFiles('{{ lockfile }}') {{'}}'}}
          restore-keys: |
            ${{'{{'}} env.CACHE_EPOCH {{'}}'}}-{{ vm }}-conda-
            ${{'{{'}} env.CACHE_EPOCH {{'}}'}}-{{ vm }}-conda-
{% endmacro %}

{% macro setup_miniconda(lockfile, if_expr="") %}
      - name: setup conda (mambaforge)
        {{ if_expr }}
        uses: conda-incubator/setup-miniconda@master
        with:
          condarc-file: .github/.condarc
          environment-file: {{ lockfile }}
          miniforge-variant: Mambaforge
          miniforge-version: 4.9.2-7
{% endmacro %}

{% macro preflight(job, if_expr="") %}
      {% if job.subdir == "win-64" %}
      - name: enable long paths (windows)
        shell: pwsh
        run: |
          Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem -Name LongPathsEnabled -Value 1
      - name: enable utf-8 console (windows)
        shell: pwsh
        run: |
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Nls\CodePage" -Name "ACP" -Type String -Value 65001
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Nls\CodePage" -Name "OEMCP" -Type String -Value 65001
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Nls\CodePage" -Name "MACCP" -Type String -Value 65001
      {% elif job.subdir == "linux-64" %}
      - name: apt clean (ubuntu)
        {{ if_expr }}
        run: |
          set -eux
          sudo bash .github/scripts/clean_ubuntu.sh
      {% endif %}
{% endmacro %}

{% raw %}
name: CI

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]
  create:
    tags: [v*]

env:
  PYTHONIOENCODING: utf-8
  PYTHONUNBUFFERED: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  MAMBA_NO_BANNER: 1
  # our stuff
  ATEST_RETRIES: 1
  CACHE_EPOCH: 4

defaults:
  run:
    shell: bash -l {0}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    env:
      CI_LINTING: 1
    steps:
      - uses: actions/checkout@v2
      {% endraw %}
      {{ cache_conda('ubuntu-20.04', 'locks/lint-linux-64.conda.lock') }}
      {{ setup_miniconda('locks/lint-linux-64.conda.lock') }}
      {% raw %}

      - name: cache (yarn)
        uses: actions/cache@v2
        with:
          path: _scripts/.yarn-packages
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('_scripts/yarn.lock', '_scripts/.yarnrc') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: preflight (doit)
        run: doit list --all --status

      - name: lint
        run: doit lint || doit lint || doit lint

      - name: postmortem (doit)
        if: always()
        run: doit list --all --status
{% endraw %}

{% for job in jobs %}
  build-{{ job.variant }}-{{ job.subdir }}:
    name: build {{ job.variant }} {{ job.subdir }}
    needs: [lint]
    runs-on: {{ job.vm }}
    env:
      CONSTRUCT_INPUTS: constructs/{{ job.variant }}-{{ job.subdir }}/*
      BUILD_LOCKFILE: {{ job.build_lockfile }}
    steps:
      - uses: actions/checkout@v2

      {% raw %}
      - name: cache (dist)
        uses: actions/cache@v2
        id: cache-dist
        with:
          path: dist
          key: |
            ${{ env.CACHE_EPOCH }}-dist-${{ runner.os }}-${{ hashFiles(env.CONSTRUCT_INPUTS, env.BUILD_LOCKFILE) }}
      {% endraw %}

      {{ preflight(job, if_dist_skip) }}

      {{ cache_conda(job.vm, job.build_lockfile, if_dist_skip) }}

      {{ setup_miniconda(job.build_lockfile, if_dist_skip) }}

      {% if job.subdir == "linux-64" and job.variant == "gpu" %}
      - name: clean cache (conda)
        {{ if_dist_skip }}
        run: |
          set -eux
          conda clean -yaf
      {% endif %}

      - name: preflight (doit)
        {{ if_dist_skip }}
        run: doit list --all --status

      - name: build (constructor)
        {{ if_dist_skip }}
        run: |
          set -eux
          doit build:{{ job.variant }}:{{ job.subdir }}:sha256 || doit build:{{ job.variant }}:{{ job.subdir }}:sha256

      - name: postmortem (doit)
        {{ if_dist_skip }}
        run: doit list --all --status

      - name: publish (dist)
        uses: actions/upload-artifact@v2
        with:
          name: dist-{{ job.variant }}-{{ job.subdir }}-{{ "${{ github.run_number }}" }}
          path: ./dist

  test-{{ job.variant }}-{{ job.subdir }}:
    name: test {{ job.variant }} {{ job.subdir }}
    needs: [build-{{ job.variant }}-{{ job.subdir }}]
    runs-on: {{ job.vm }}
    steps:
      - uses: actions/checkout@v2

      {{ preflight(job) }}

      - uses: actions/download-artifact@v2
        with:
          name: dist-{{ job.variant }}-{{ job.subdir }}-{{ "${{ github.run_number }}" }}
          path: ./dist

      {{ cache_conda(job.vm, job.atest_lockfile) }}

      {{ setup_miniconda(job.atest_lockfile) }}

      - name: test (robot)
        run: |
          set -eux
          doit -s test:{{ job.variant }}:{{ job.subdir }}

      {{ setup_miniconda(job.audit_lockfile) }}

      - name: audit (safety)
        run: |
          set -eux
          mkdir -p ./build/audit
          python _scripts/audit.py ./build/atest/{{ job.variant }}-{{ job.subdir }}-0

      - name: publish (atest and audit)
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: atest-{{ job.variant }}-{{ job.subdir }}-{{ "${{ github.run_number }}" }}
          path: |
            ./build/atest
            ./build/audit

{% endfor %}
  draft-release:
    name: release
    needs: {% for job in jobs %}
      - build-{{ job.variant }}-{{ job.subdir }}
    {%- endfor %}
{% raw %}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: get branch name
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: info

      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: apt clean (ubuntu)
        run: |
          set -eux
          sudo bash .github/scripts/clean_ubuntu.sh

      - name: dry-run release artifacts
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        env:
          GIT_REF: ${{ github.ref }}
        run: python _scripts/release.py

      - name: release artifacts
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          GIT_REF: ${{ github.ref }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python _scripts/release.py
{% endraw %}